body {
  /* Set "cellValue" to 0 */
  counter-reset: cellValue;
}

:root {
  --hg_red: rgba(255, 0, 0, 0.8);
  --hg_green: rgba(0, 255, 0, 0.8);
  --hg_blue: rgba(0, 0, 255, 0.8);
  --hg_hex_orizontal: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
  --hg_quadrant: polygon(43.75% 0%, 56.25% 0%, 62.5% 10%, 75% 10%, 81.25% 20%, 93% 20%, 100% 30%, 93.75% 40%, 100% 50%, 93.75% 60%, 100% 70%, 93.75% 80%, 81.25% 80%, 75% 90%, 62.5% 90%, 56.25% 100%, 43.75% 100%, 37.5% 90%, 25% 90%, 18.75% 80%, 6.25% 80%, 0% 70%, 6.25% 60%, 0% 50%, 6.25% 40%, 0% 30%, 6.25% 20%, 18.75% 20%, 25% 10%, 37.5% 10%);

  --hg_SQRT3: 1.7320;

  /* #region    HEX ORIZONTAL ............................................................................ */
  --hg_hex_margin: 0.05;
  --hg_hex_side: 6rem;
  /* width = 2 * side */
  --hg_hex_width: calc(2 * var(--hg_hex_side));
  /* apothem = 0.5 * side * sqrt3 */
  --hg_hex_apothem: calc(0.5 * var(--hg_hex_side) * var(--hg_SQRT3));
  /* height = 2 * apothem */
  --hg_hex_height: calc(2 * var(--hg_hex_apothem));
  /* #endregion HEX ORIZONTAL............................................................................. */

  /* #region    HEX VERTICAL ............................................................................. */
  --hg_vhex_side: calc(var(--hg_vex_apothem));
  --hg_vhex_height: calc(2 * var(--hg_vhex_side));
  --hg_vhex_apothem: calc(0.5 * var(--vg_qhex_side) * var(--hg_SQRT3));
  --hg_vhex_width: calc(2 * var(--hg_vhex_apothem));
  /* #endregion HEX ORIZONTAL............................................................................. */

  /* #region    QUADRANT ................................................................................. */
  --hg_quadrant_height: calc(var(--hg_hex_height) * 5 * calc(1 + var(--hg_hex_margin)));
  --hg_quadrant_width: calc(var(--hg_hex_width) * 4 * calc(1 + var(--hg_hex_margin)));
  /* #endregion QUADRANT .................................................................................. */
}

.hex {
  width: var(--hg_hex_width);
  height: var(--hg_hex_height);
  clip-path: var(--hg_hex_orizontal);
  position: absolute;
  transform: translate(-50%, -50%);
  text-align: center;
}

.hex:nth-child(odd) {
  background: var(--hg_red);
}

.hex:nth-child(even) {
  background: var(--hg_green);
}

.quadrant {
  width: var(--hg_quadrant_width);
  height: var(--hg_quadrant_height);
  clip-path: var(--hg_quadrant);
  background: var(--hg_blue);
  position: relative;
}

/* .container {
  /* font-size: 0 --> disable white space between inline block element 
  font-size: 0;
}

.container:before {
  /* --hg_BIG_NUM_TMP: 2000px; 
  content: "";
  margin-top: calc(var(--hg_hex_overleap) + var(--hg_hex_margin));
  width: calc(var(--hg_hex_apothem) + var(--hg_hex_margin));
  float: left;
  height: var(--hg_BIG_NUM_TMP);
  /* sfasatura orizzontale 
  shape-outside: repeating-linear-gradient(#000 0 calc(var(--hg_hex_side)), #0000 0 var(--hg_row_left_height));
} */

/* .etiquette {
  width: var(--hg_hex_width);
  text-align: center;
  background-color: black;
  color: white;
  visibility: hidden;
}

.etiquette:after {
  counter-increment: cellValue;
  content: counter(cellValue);
}

.hex:active .etiquette {
  visibility: visible;
} */